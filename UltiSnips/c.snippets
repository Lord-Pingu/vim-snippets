priority 1

global !p

# displays input list in text editor and returns match
def autocomplete(t, opts):
	if t:
		opts = [m[len(t):] for m in opts if m.startswith(t)]
	if len(opts) == 1:
		return opts[0]
	return "(" + "|".join(opts) + ")" 

endglobal


################################################################################
#                          C PREPROCESSOR SNIPPETS                             #
################################################################################

snippet # "preprocessors" bA
#$1`!p
preprocessors = ["define", "include", "undef", "ifdef", "ifndef", "if", "else", "elif", "endif", "error", "pragma"]
snip.rv = autocomplete(t[1], preprocessors)` $0
endsnippet

snippet '#include ("|<)' "include" rA
#include `!p snip.rv = match.group(1)`$1`!p snip.rv = '>' if match.group(1) == '<' else '"'`
endsnippet


################################################################################
#                           C FUNCTION SNIPPETS                                #
################################################################################

snippet '((\w+)(\s|\*)+\w+)\s*\((.*)\)' "function decleration" rbA
`!p snip.rv = match.group(1) + f" ( {match.group(4).strip()} )" if match.group(4) else f"{match.group(1)} ( void )"`
{
	$1`!p snip.rv = "\n\treturn" if match.group(2) != "void" else ""`
}
$0
endsnippet

snippet f "function decleration"
$1 ( $2 )
{
	$3`!p snip.rv = "\n\treturn" if "void" not in t[1].split() else ""`
}$0
endsnippet

################################################################################
#                           C PROCEEDURAL SNIPPETS                             #
################################################################################

snippet for "for loop"
for ( int $1=${2:0} ; $1 $3 ; $1${4:++} ) `!p snip.rv = "{" if t[5].count("\n\t") else ""`
	$5
`!p snip.rv = "}" if t[5].count("\n\t") else ""`$0
endsnippet

snippet while "while loop"
while ( $1 ) `!p snip.rv = "{" if t[2].count("\n\t") else ""`
	$2
`!p snip.rv = "}" if t[2].count("\n\t") else ""`$0
endsnippet

snippet do "do while loop"
do {
	$1
} while ( $2 );$0
endsnippet

snippet switch "switch case"
switch ( $1 ) {
	${2:case}
}$0
endsnippet

snippet case "case"
case $1:
	$0
endsnippet

snippet 'if(\{?)' "if" r
if ( $1 ) `!p snip.rv = "{" if match.group(1) else ""`
	$2
`!p snip.rv = "}" if match.group(1) else ""`
endsnippet

snippet 'elif(\{?)' "else if" r
else if ( $1 ) `!p snip.rv = "{" if match.group(1) else ""`
	$2
`!p snip.rv = "}" if match.group(1) else ""`
endsnippet

################################################################################
#                            C KEYWORD SNIPPETS                                #
################################################################################

snippet nn "NULL" A
NULL$0
endsnippet

snippet 'sf' "sizeof" r
sizeof( $1 )$0
endsnippet

snippet printf "printf;" A
printf( "$1${2:\n}"${3/.+/, /}$3 );$0
endsnippet

snippet malloc "malloc with typecast;" A
${1/.+/\( /}$1${1/.+/ \) /}malloc($2);$0
endsnippet

snippet het "heterogeneous data types" 
${1|struct,union,enum|} $2${2/.+/ /}{
	$4
}${3/.+/ /}$3;$0
endsnippet

################################################################################
#                               C MISC SNIPPETS                                #
################################################################################

snippet // "comment"
/* $1 */$0
endsnippet

################################################################################
#                              C GTEST SNIPPETS                                #
################################################################################

snippet TEST "gtest unittest"
TEST ( $2 ) {
	$3
	EXPECT_$1`!p snip.rv = autocomplete(t[1], ["EQ", "NE", "LE", "GT", "FALSE", "TRUE", "STREQ", "STRNE", "STRCASEEQ", "STRCASENE"])`( $4 );
}$0
endsnippet

